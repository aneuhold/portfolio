name: 'Pull Request Actions'

on:
  pull_request:
    # Only initiate the workflow when a PR is opened, or committed to.
    branches:
      - main

jobs:
  testAndDeploy:
    name: 'Test and Deploy'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      deployments: write
      statuses: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up PNPM
        uses: pnpm/action-setup@v3

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: |
            pnpm-lock.yaml
            svelte/pnpm-lock.yaml
            react/pnpm-lock.yaml

      - name: Install dependencies (root, react, svelte)
        run: pnpm run i

      - name: Build the svelte site
        run: pnpm svelte:build

      - name: Build the react site
        run: pnpm react:build

      # Run tests after the builds are done
      - name: Run tests
        run: pnpm test

      - name: Deploy to Netlify (Svelte)
        uses: nwtgck/actions-netlify@v3.0
        id: netlify-svelte
        with:
          publish-dir: './svelte/build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: '${{ github.event.pull_request.title }} Deploy Preview'
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          github-deployment-description: 'Netlify Deploy Preview (Svelte)'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SVELTE_SITE_ID }}
        timeout-minutes: 1

      - name: Deploy to Netlify (React)
        uses: nwtgck/actions-netlify@v3.0
        id: netlify-react
        with:
          publish-dir: './react/out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: '${{ github.event.pull_request.title }} Deploy Preview (React)'
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          github-deployment-description: 'Netlify Deploy Preview (React)'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_REACT_SITE_ID }}
        timeout-minutes: 1

      - name: Run Lighthouse CI (Svelte)
        id: lighthouse-svelte
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.netlify-svelte.outputs.deploy-url }}
          configPath: ./lighthouserc.yml
          temporaryPublicStorage: true

      - name: Run Lighthouse CI (React)
        id: lighthouse-react
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.netlify-react.outputs.deploy-url }}
          configPath: ./lighthouserc.yml
          temporaryPublicStorage: true

      - name: Post Lighthouse Results to PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const manifestSvelte = JSON.parse('${{ steps.lighthouse-svelte.outputs.manifest }}');
            const manifestReact = JSON.parse('${{ steps.lighthouse-react.outputs.manifest }}');
            const linksSvelte = JSON.parse('${{ steps.lighthouse-svelte.outputs.links }}');
            const linksReact = JSON.parse('${{ steps.lighthouse-react.outputs.links }}');

            function formatScore(score) {
              const percentage = Math.round(score * 100);
              let emoji = '🔴';
              if (percentage >= 90) emoji = '🟢';
              else if (percentage >= 50) emoji = '🟡';
              return `${emoji} ${percentage}`;
            }

            function formatResults(manifest, links, siteName) {
              if (!manifest || manifest.length === 0) return `### ${siteName}\n\nNo results available.\n\n`;
              
              // Find the representative run (median), or fall back to first result
              const result = manifest.find(r => r.isRepresentativeRun) || manifest[0];
              const summary = result.summary;
              const reportLink = links[result.url] || 'N/A';
              
              // Show run count if multiple runs
              const runInfo = manifest.length > 1 ? `\n_Median of ${manifest.length} runs shown_\n` : '';
              
              return `### ${siteName}

            | Category | Score |
            |----------|-------|
            | 🎭 Performance | ${formatScore(summary.performance)} |
            | ♿ Accessibility | ${formatScore(summary.accessibility)} |
            | 🏆 Best Practices | ${formatScore(summary['best-practices'])} |
            | 🔍 SEO | ${formatScore(summary.seo)} |
            | 📱 PWA | ${formatScore(summary.pwa || 0)} |
            ${runInfo}
            📊 [View Full Report](${reportLink})
            `;
            }

            const commentBody = `## 🚦 Lighthouse CI Results

            ${formatResults(manifestSvelte, linksSvelte, '🔷 Svelte Site')}
            ${formatResults(manifestReact, linksReact, '⚛️ React Site')}
            ---
            _Updated on ${new Date().toLocaleString("en-US"), {timeZone: "PST"}}_`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚦 Lighthouse CI Results')
            );

            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
